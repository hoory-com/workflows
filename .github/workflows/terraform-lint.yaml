name: Terraform Lint

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

on:
  workflow_call:
    secrets:
      GITHUB_PAT:
        required: true

jobs:
  lint:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - uses: hashicorp/setup-terraform@v2

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init -backend=false >/dev/null

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_PAT }}
          script: |
            // 0. Create helper functions
            function emojiStatus(status) {
              return (status === 'success') ? '‚úÖ' : '‚ùå'
            }
            
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })
            
            // 2. Prepare format of the comment
            const output = `#### ${emojiStatus('${{ steps.fmt.outcome }}')} Terraform Format and Style üñå
            #### ${emojiStatus('${{ steps.init.outcome }}')} Terraform Initialization ‚öôÔ∏è
            #### ${emojiStatus('${{ steps.validate.outcome }}')} Terraform Validation ü§ñ
            <details><summary>Validation Output</summary>
            
            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;
            
            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
            
            // 4. Fail the workflow if one of the steps failed
            const statuses = ['${{ steps.fmt.outcome }}', '${{ steps.init.outcome }}', '${{ steps.validate.outcome }}']
            if (statuses.includes("failure")) {
              core.setFailed("Terraform failed, check PR comment for details")
            }
