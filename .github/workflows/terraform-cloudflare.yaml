name: Terraform-CloudFlare

on:
  workflow_call:
    secrets:
      CLOUDFLARE_API_TOKEN:
        required: true
      CLOUDFLARE_ZONE_ID:
        required: true
      CLOUDFLARE_PROD_API_TOKEN:
        required: true
      CLOUDFLARE_PROD_ZONE_ID:
        required: true
      TF_BACKEND_SERVICE_ACCOUNT:
        required: true

jobs:
  configure:
    runs-on: ubuntu-latest
    outputs:
      envs: ${{ steps.main.outputs.envs }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Main
        id: main
        run: |
          envs=$(jq -Rsc 'split("\n")[:-1]' <<<"$(find vars -name '*.tfvars' | sed 's|vars/||;s|.tfvars||')")
          echo "envs=$envs" >> "$GITHUB_OUTPUT"

  terraform:
    needs: [configure]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        env: ${{ fromJSON(needs.configure.outputs.envs) }}
    concurrency: ${{ github.repository }}:${{ github.workflow }}:${{ matrix.env }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Export TF Backend Credentials
        run: |
          dev_gcp_sa_path='/tmp/gcp-dev.sa.json'
          echo '${{ secrets.TF_BACKEND_SERVICE_ACCOUNT }}' >> $dev_gcp_sa_path
          echo "GOOGLE_BACKEND_CREDENTIALS=$dev_gcp_sa_path" >> $GITHUB_ENV
          
          case '${{ matrix.env }}' in
          'dev' | 'stage')
            echo "TF_VAR_cloudflare_api_token=${{ secrets.CLOUDFLARE_API_TOKEN }}"
            echo "TF_VAR_cloudflare_zone_id=${{ secrets.CLOUDFLARE_ZONE_ID }}"
            ;;
          'prod')
            echo "TF_VAR_cloudflare_api_token=${{ secrets.CLOUDFLARE_PROD_API_TOKEN }}"
            echo "TF_VAR_cloudflare_zone_id=${{ secrets.CLOUDFLARE_PROD_ZONE_ID }}"
            ;;
          * )
            echo "No credentials configured for environment '${{ matrix.env }}'"
            exit 1
            ;;
          esac

      - name: Touch override.tf
        run: |
          cat <<EOF > override.tf
          terraform {
            required_providers {
              cloudflare = {
                source  = "cloudflare/cloudflare"
                version = "~> 3.0"
              }
            }
          }
  
          provider "cloudflare" {
            api_token = var.cloudflare_api_token
          }
          
          terraform {
            backend "gcs" {
              bucket = "tf-state-hoory-com"
              prefix = "${{ github.repository }}"
            }
          }
          EOF

      - uses: hashicorp/setup-terraform@v1

      - name: Terraform init
        run: terraform init

      - name: Terraform select workspace
        run: terraform workspace select '${{ matrix.env }}' || terraform workspace new '${{ matrix.env }}'

      - name: Terraform plan
        run: terraform plan -no-color -out=__plan -var-file='vars/${{ matrix.env }}.tfvars'

      - name: Terraform apply
        run: terraform apply -no-color __plan
        if: ${{ github.ref == 'refs/heads/master' }}
