name: CI/CD for a static site

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

on:
  workflow_call:
    secrets:
      GCP_SERVICE_ACCOUNT:
        required: true
      GITHUB_PAT:
        required: true
      NPM_PACKAGES_PAT:
        required: true
      SENTRY_AUTH_TOKEN:
        required: true
      SENTRY_ORG:
        required: true
      SURGE_TOKEN:
        required: true
      SURGE_EMAIL:
        required: true
      TF_SERVICE_ACCOUNT:
        required: true
      PROJECT_ID:
        required: true
      CLOUDFLARE_API_TOKEN:
        required: true
      CLOUDFLARE_ZONE_ID:
        required: true
    inputs:
      DOMAIN:
        type: string
        required: true
      SENTRY_PROJECT_NAME:
        type: string
        default: ""
      TARGET_ENVIRONMENT:
        type: string
        default: "development"
      NEEDS_CI_DEPLOYMENT:
        type: boolean
        default: false
      USE_SURGE:
        type: boolean
        default: true
      MERGE_BACK_TO_BRANCH:
        type: string
        default: develop
      ADDITIONAL_UPLOAD_DOMAIN:
        type: string
        default: ''

jobs:
  preview-infra:
    if: inputs.USE_SURGE == false
    uses: hoory-com/workflows/.github/workflows/terraform-pr-preview.yaml@master
    secrets:
      TF_SERVICE_ACCOUNT: ${{ secrets.TF_SERVICE_ACCOUNT }}
      PROJECT_ID: ${{ secrets.PROJECT_ID }}
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      CLOUDFLARE_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}
      GITHUB_PAT: ${{ secrets.HOORY_GITHUB_PAT }}
    with:
      DOMAIN_PREFIX: ${{ inputs.SENTRY_PROJECT_NAME }}-

  main:
    name: CI/CD
    runs-on: ubuntu-latest
    timeout-minutes: 10

    strategy:
      matrix:
        node-version: [16.x]
    env:
      NODE_OPTIONS: "--max_old_space_size=4096"
      CI: false

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Set up gcloud
        id: 'auth'
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          cache: yarn

      # Add private packages
      - name: Add private packages PAT
        run: |
          echo "@hoory-com:registry=https://npm.pkg.github.com/
          //npm.pkg.github.com/:_authToken=${{secrets.NPM_PACKAGES_PAT}}" > .npmrc
      - name: Extract private package list
        uses: sergeysova/jq-action@v2
        id: privatePackages
        with:
          cmd: 'jq .branches.$GITHUB_BASE_REF[] private-packages.json -r'
          multiline: true
      - name: Install Private packages
        run: |
          packages="${{ steps.privatePackages.outputs.value }}"
          for package in $packages; do
            version="latest"
            if [[ $package == *":"*  ]]; then
              packageAndVersion=(${package//:/ })
              package=${packageAndVersion[0]}
              version=${packageAndVersion[1]}
            fi
            echo "PACKAGE $package:$version"
            echo $(jq --arg package "$package" --arg version "$version" '.devDependencies[$package]=$version' package.json | jq . ) > package.json
          done

      - name: Install dependencies
        run: yarn install

      # Run format check on CI
      - name: Check format
        run: yarn run format:check
        if: github.event.pull_request.merged == false

      - name: Keep production environment variables file
        run: find . -name '.env.*' -not -name '.env.production' -delete

      # Change Deployment state to deploying
      - uses: chrnorm/deployment-action@releases/v1
        if: github.event.pull_request.merged == true
        name: Create GitHub deployment
        id: deployment
        with:
          token: "${{ secrets.GITHUB_PAT }}"
          environment: "${{ inputs.TARGET_ENVIRONMENT }}"

      - name: Populate env variables
        run: node env.js ${{inputs.TARGET_ENVIRONMENT}}
        env:
          SENTRY_RELEASE_TAG: GITHUB_SHA

      - name: Build app
        run: yarn run build

      # Upload built files
      - name: Upload the built application
        uses: "google-github-actions/upload-cloud-storage@v0"
        if: |
          github.event.pull_request.merged == true || 
          (inputs.NEEDS_CI_DEPLOYMENT == true && inputs.USE_SURGE == false)
        with:
          path: "./build/"
          parent: false
          destination: "${{ inputs.DOMAIN }}"
      - name: Upload the built application to additional domain (${{ inputs.ADDITIONAL_UPLOAD_DOMAIN }})
        uses: "google-github-actions/upload-cloud-storage@v0"
        if: |
          github.event.pull_request.merged == true && inputs.ADDITIONAL_UPLOAD_DOMAIN != ''
        with:
          path: "./build/"
          parent: false
          destination: "${{ inputs.ADDITIONAL_UPLOAD_DOMAIN }}"
      - name: Deploy to ${{ inputs.SENTRY_PROJECT_NAME }}-${{ github.event.pull_request.number }}.surge.sh
        uses: dswistowski/surge-sh-action@v1
        if: github.event.pull_request.merged == false && inputs.USE_SURGE == true
        with:
          domain: '${{ inputs.SENTRY_PROJECT_NAME }}-${{ github.event.pull_request.number }}.surge.sh'
          project: './build'
          login: ${{ secrets.SURGE_EMAIL }}
          token: ${{ secrets.SURGE_TOKEN }}

      # Change Deployment state to success/failure
      - name: Update deployment status (success)
        if: github.event.pull_request.merged == true && success()
        uses: chrnorm/deployment-status@releases/v1
        with:
          token: "${{ secrets.GITHUB_PAT }}"
          state: "success"
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
      - name: Update deployment status (failure)
        if: github.event.pull_request.merged == true && failure()
        uses: chrnorm/deployment-status@releases/v1
        with:
          token: "${{ secrets.GITHUB_PAT }}"
          state: "failure"
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}

      # Keep sentry informed
      - name: Create Sentry release
        uses: getsentry/action-release@v1
        if: |
          inputs.SENTRY_PROJECT_NAME != '' && 
          github.event.pull_request.merged == true
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ inputs.SENTRY_PROJECT_NAME }}
        with:
          environment: ${{ inputs.TARGET_ENVIRONMENT }}
          version: ${{ github.GITHUB_SHA }}
          sourcemaps: "./build/js"
          ignore_missing: true
          ignore_empty: true
          
      - name: Create merge back PR
        if: inputs.TARGET_ENVIRONMENT == 'production' && github.event.pull_request.merged == true
        uses: repo-sync/pull-request@v2
        with:
          github_token: ${{ secrets.GITHUB_PAT }}
          destination_branch: ${{ inputs.merge_back_to_branch }}
          pr_title: "[Automated] Merge ${{ github.ref_name }} into ${{ inputs.merge_back_to_branch }}"
          pr_body: "Automated Pull Request"

  put-comment:
    needs: [main]
    uses: hoory-com/workflows/.github/workflows/pr-comment.yaml@master
    if: github.event.pull_request.merged == false && inputs.USE_SURGE == true
    with:
      COMMENT_TEXT: |
        <strong>${{ github.repository }}</strong> infra and deployment are ready ðŸ¥³
      
        Preview Link: <a href="https://${{ inputs.SENTRY_PROJECT_NAME }}-${{ github.event.pull_request.number }}.surge.sh" target="_blank">Click here to open demo</a>
      
        *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*
