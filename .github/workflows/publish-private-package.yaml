name: CI/CD for publishing private packages

on:
  workflow_call:
    inputs:
      org_name:
        description: "Owner/Organization name"
        required: false
        type: string
        default: hoory-com
    secrets:
      GITHUB_PACKAGES_PAT:
        required: true
      PACKAGE_NAME:
        required: true
      PUBLISH_FOLDER:
        required: true

jobs:
  publish-gpr:
    name: Publish GPR
    runs-on: ubuntu-latest
    timeout-minutes: 10

    strategy:
      matrix:
        node-version: [16.x]
        protoc-version: [3.14.0]

    steps:
      # Initialize
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Setup Bun Runtime
        uses: antongolub/action-setup-bun@v1 # or @v1.x.x
        with:
          bun-version: 0.3.0
          bun-repo: 'Jarred-Sumner/bun-releases-for-updater'
          bun-config: '{"install": {"scopes": { "@hoory-com": { "token": "${{secrets.GITHUB_PACKAGES_PAT}}", "url": "https://npm.pkg.github.com/" }}}}'
          cache: true
          cache-bin: true
      - name: Install protoc
        uses: arduino/setup-protoc@v1
        with:
          version: ${{ matrix.protoc-version }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      # Add private packages
      - name: Add private packages PAT
        run: |
          echo "@hoory-com:registry=https://npm.pkg.github.com/
          //npm.pkg.github.com/:_authToken=${{secrets.GITHUB_PACKAGES_PAT}}" > .npmrc
      - name: Extract private package list
        uses: sergeysova/jq-action@v2
        id: privatePackages
        with:
          cmd: "jq .branches.develop[] private-packages.json -r"
          multiline: true
      - name: Add Private packages
        run: |
          packages="${{ steps.privatePackages.outputs.value }}"
          for package in $packages; do
            version="latest"
            if [[ $package == *":"*  ]]; then
              packageAndVersion=(${package//:/ })
              package=${packageAndVersion[0]}
              version=${packageAndVersion[1]}
            fi
            echo $(jq --arg package "$package" --arg version "$version" '.devDependencies[$package]=$version' package.json | jq . ) > package.json
          done

      # Install
      - name: Install dependencies
        run: bun install

      # Increase version and push to NPM
      - name: Increase the package version
        run: |
          PREV_VERSION=$(curl \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{secrets.GITHUB_PACKAGES_PAT}}" \
            https://api.github.com/orgs/hoory-com/packages/npm/${{secrets.PACKAGE_NAME}}/versions?per_page=1 | jq '.[].name')
          NEXTVERSION=$(echo ${PREV_VERSION} | awk -F. -v OFS=. '{$NF += 1 ; print}' | tr -d '"')
          echo $(jq --arg version "$NEXTVERSION" '.version=$version' package.json | jq . ) > package.json

      # Check format on CI
      - name: Check format
        run: yarn run format:check
        if: github.event.pull_request.merged == false

      # Build the app
      - name: Build package
        run: bun run build

      # Publish it on NPM
      - name: Publish package
        if: github.event.pull_request.merged == true
        run: cd ${{ secrets.PUBLISH_FOLDER }} && npm publish

      - name: Delete old versions of package
        uses: smartsquaregmbh/delete-old-packages@v0.6.0
        with:
          keep: 5
          token: ${{ secrets.GITHUB_PACKAGES_PAT }}
          org_name: ${{ inputs.org_name }}
          names: |
            ${{ secrets.PACKAGE_NAME }}
